// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/aperturerobotics/inca/inca.proto

/*
Package inca is a generated protocol buffer package.

It is generated from these files:
	github.com/aperturerobotics/inca/inca.proto

It has these top-level messages:
	Validator
	ValidatorSet
	Block
	BlockRoundInfo
	BlockHeader
	Vote
	Genesis
	ChainConfig
	TimingConfig
	NodeMessage
	ChainPubsubMessage
*/
package inca

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/aperturerobotics/timestamp"
import storageref "github.com/aperturerobotics/storageref"
import _ "github.com/aperturerobotics/objectsig"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EncryptionStrategy int32

const (
	EncryptionStrategy_EncryptionStrategy_Invalid             EncryptionStrategy = 0
	EncryptionStrategy_EncryptionStrategy_ConvergentImmutable EncryptionStrategy = 1
)

var EncryptionStrategy_name = map[int32]string{
	0: "EncryptionStrategy_Invalid",
	1: "EncryptionStrategy_ConvergentImmutable",
}
var EncryptionStrategy_value = map[string]int32{
	"EncryptionStrategy_Invalid":             0,
	"EncryptionStrategy_ConvergentImmutable": 1,
}

func (x EncryptionStrategy) String() string {
	return proto.EnumName(EncryptionStrategy_name, int32(x))
}
func (EncryptionStrategy) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// NodeMessageType identifies the purpose of the node message.
// Each node message type gets its own pub-sub channel.
// Additional types may be declared elsewhere.
type NodeMessageType int32

const (
	NodeMessageType_NodeMessageType_UNKNOWN      NodeMessageType = 0
	NodeMessageType_NodeMessageType_VOTE         NodeMessageType = 1
	NodeMessageType_NodeMessageType_BLOCK_COMMIT NodeMessageType = 2
	NodeMessageType_NodeMessageType_APP          NodeMessageType = 3
)

var NodeMessageType_name = map[int32]string{
	0: "NodeMessageType_UNKNOWN",
	1: "NodeMessageType_VOTE",
	2: "NodeMessageType_BLOCK_COMMIT",
	3: "NodeMessageType_APP",
}
var NodeMessageType_value = map[string]int32{
	"NodeMessageType_UNKNOWN":      0,
	"NodeMessageType_VOTE":         1,
	"NodeMessageType_BLOCK_COMMIT": 2,
	"NodeMessageType_APP":          3,
}

func (x NodeMessageType) String() string {
	return proto.EnumName(NodeMessageType_name, int32(x))
}
func (NodeMessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// OperationMode is the operation mode of the validator.
type Validator_OperationMode int32

const (
	// OperationMode_STAGING indicates the validator is not currently online.
	// A validator can voluntarily step-down for some time this way.
	Validator_OperationMode_STAGING Validator_OperationMode = 0
	// OperationMode_OPERATING indicates the validator is currently operating.
	Validator_OperationMode_OPERATING Validator_OperationMode = 1
)

var Validator_OperationMode_name = map[int32]string{
	0: "OperationMode_STAGING",
	1: "OperationMode_OPERATING",
}
var Validator_OperationMode_value = map[string]int32{
	"OperationMode_STAGING":   0,
	"OperationMode_OPERATING": 1,
}

func (x Validator_OperationMode) String() string {
	return proto.EnumName(Validator_OperationMode_name, int32(x))
}
func (Validator_OperationMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

// Validator holds information about a validator.
type Validator struct {
	// PubKey is the validator's public key.
	PubKey []byte `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	// VotingPower is the voting power of the validator.
	VotingPower uint64 `protobuf:"varint,2,opt,name=voting_power,json=votingPower" json:"voting_power,omitempty"`
	// OperationMode is the operation mode of the validator.
	OperationMode Validator_OperationMode `protobuf:"varint,3,opt,name=operation_mode,json=operationMode,enum=inca.Validator_OperationMode" json:"operation_mode,omitempty"`
}

func (m *Validator) Reset()                    { *m = Validator{} }
func (m *Validator) String() string            { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()               {}
func (*Validator) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Validator) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *Validator) GetVotingPower() uint64 {
	if m != nil {
		return m.VotingPower
	}
	return 0
}

func (m *Validator) GetOperationMode() Validator_OperationMode {
	if m != nil {
		return m.OperationMode
	}
	return Validator_OperationMode_STAGING
}

// ValidatorSet is the current set of validators.
type ValidatorSet struct {
	// Validators are the address to validator object pairings.
	// Validators are sorted by crc32 of pubkey and voting power (varint) concatinated.
	Validators []*Validator `protobuf:"bytes,1,rep,name=validators" json:"validators,omitempty"`
}

func (m *ValidatorSet) Reset()                    { *m = ValidatorSet{} }
func (m *ValidatorSet) String() string            { return proto.CompactTextString(m) }
func (*ValidatorSet) ProtoMessage()               {}
func (*ValidatorSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ValidatorSet) GetValidators() []*Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

// Block is a committed block in the chain.
type Block struct {
	// BlockHeaderRef is the reference to the block header.
	// Must be signed by the proposer.
	BlockHeaderRef *storageref.StorageRef `protobuf:"bytes,1,opt,name=block_header_ref,json=blockHeaderRef" json:"block_header_ref,omitempty"`
	// VoteRefs are the validator votes included to justify this block.
	VoteRefs []*storageref.StorageRef `protobuf:"bytes,2,rep,name=vote_refs,json=voteRefs" json:"vote_refs,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Block) GetBlockHeaderRef() *storageref.StorageRef {
	if m != nil {
		return m.BlockHeaderRef
	}
	return nil
}

func (m *Block) GetVoteRefs() []*storageref.StorageRef {
	if m != nil {
		return m.VoteRefs
	}
	return nil
}

// BlockRoundInfo contains information about the round.
type BlockRoundInfo struct {
	Height uint64 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Round  uint64 `protobuf:"varint,2,opt,name=round" json:"round,omitempty"`
}

func (m *BlockRoundInfo) Reset()                    { *m = BlockRoundInfo{} }
func (m *BlockRoundInfo) String() string            { return proto.CompactTextString(m) }
func (*BlockRoundInfo) ProtoMessage()               {}
func (*BlockRoundInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BlockRoundInfo) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockRoundInfo) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

// BlockHeader is the header of a block.
type BlockHeader struct {
	// GenesisRef contains a reference to the Genesis object.
	GenesisRef *storageref.StorageRef `protobuf:"bytes,1,opt,name=genesis_ref,json=genesisRef" json:"genesis_ref,omitempty"`
	// ChainConfigRef contains a reference to the ChainConfig object.
	ChainConfigRef *storageref.StorageRef `protobuf:"bytes,2,opt,name=chain_config_ref,json=chainConfigRef" json:"chain_config_ref,omitempty"`
	// NextChainConfigRef contains a reference to the next ChainConfig object.
	NextChainConfigRef *storageref.StorageRef `protobuf:"bytes,3,opt,name=next_chain_config_ref,json=nextChainConfigRef" json:"next_chain_config_ref,omitempty"`
	// LastBlockRef contains a reference to the last BlockHeader object.
	LastBlockRef *storageref.StorageRef `protobuf:"bytes,4,opt,name=last_block_ref,json=lastBlockRef" json:"last_block_ref,omitempty"`
	// RoundInfo contains the round information.
	RoundInfo *BlockRoundInfo `protobuf:"bytes,5,opt,name=round_info,json=roundInfo" json:"round_info,omitempty"`
	// BlockTs is the timestamp the block header was proposed.
	BlockTs *timestamp.Timestamp `protobuf:"bytes,6,opt,name=block_ts,json=blockTs" json:"block_ts,omitempty"`
	// ProposerId is the proposer identifier.
	ProposerId string `protobuf:"bytes,7,opt,name=proposer_id,json=proposerId" json:"proposer_id,omitempty"`
	// StateRef is the reference to the application state.
	StateRef *storageref.StorageRef `protobuf:"bytes,8,opt,name=state_ref,json=stateRef" json:"state_ref,omitempty"`
}

func (m *BlockHeader) Reset()                    { *m = BlockHeader{} }
func (m *BlockHeader) String() string            { return proto.CompactTextString(m) }
func (*BlockHeader) ProtoMessage()               {}
func (*BlockHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BlockHeader) GetGenesisRef() *storageref.StorageRef {
	if m != nil {
		return m.GenesisRef
	}
	return nil
}

func (m *BlockHeader) GetChainConfigRef() *storageref.StorageRef {
	if m != nil {
		return m.ChainConfigRef
	}
	return nil
}

func (m *BlockHeader) GetNextChainConfigRef() *storageref.StorageRef {
	if m != nil {
		return m.NextChainConfigRef
	}
	return nil
}

func (m *BlockHeader) GetLastBlockRef() *storageref.StorageRef {
	if m != nil {
		return m.LastBlockRef
	}
	return nil
}

func (m *BlockHeader) GetRoundInfo() *BlockRoundInfo {
	if m != nil {
		return m.RoundInfo
	}
	return nil
}

func (m *BlockHeader) GetBlockTs() *timestamp.Timestamp {
	if m != nil {
		return m.BlockTs
	}
	return nil
}

func (m *BlockHeader) GetProposerId() string {
	if m != nil {
		return m.ProposerId
	}
	return ""
}

func (m *BlockHeader) GetStateRef() *storageref.StorageRef {
	if m != nil {
		return m.StateRef
	}
	return nil
}

// Vote is a signature on a proposal by a validator.
type Vote struct {
	// BlockHeaderRef is the reference to the block header.
	BlockHeaderRef *storageref.StorageRef `protobuf:"bytes,1,opt,name=block_header_ref,json=blockHeaderRef" json:"block_header_ref,omitempty"`
}

func (m *Vote) Reset()                    { *m = Vote{} }
func (m *Vote) String() string            { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()               {}
func (*Vote) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Vote) GetBlockHeaderRef() *storageref.StorageRef {
	if m != nil {
		return m.BlockHeaderRef
	}
	return nil
}

// Genesis is the initial object starting the blockchain.
type Genesis struct {
	// ChainId is used to differentiate between chains, but could be set to anything.
	// It is an opaque value and ignored by the system.
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId" json:"chain_id,omitempty"`
	// Timestamp contains the time the genesis block was formed.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	// EncStrategy is the encryption strategy to use.
	EncStrategy EncryptionStrategy `protobuf:"varint,3,opt,name=enc_strategy,json=encStrategy,enum=inca.EncryptionStrategy" json:"enc_strategy,omitempty"`
	// InitChainConfig is the initial chain configuration.
	InitChainConfigRef *storageref.StorageRef `protobuf:"bytes,4,opt,name=init_chain_config_ref,json=initChainConfigRef" json:"init_chain_config_ref,omitempty"`
}

func (m *Genesis) Reset()                    { *m = Genesis{} }
func (m *Genesis) String() string            { return proto.CompactTextString(m) }
func (*Genesis) ProtoMessage()               {}
func (*Genesis) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Genesis) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *Genesis) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Genesis) GetEncStrategy() EncryptionStrategy {
	if m != nil {
		return m.EncStrategy
	}
	return EncryptionStrategy_EncryptionStrategy_Invalid
}

func (m *Genesis) GetInitChainConfigRef() *storageref.StorageRef {
	if m != nil {
		return m.InitChainConfigRef
	}
	return nil
}

// ChainConfig is the configuration for the blockchain. Can be updated each block.
type ChainConfig struct {
	// TimingConfig contains the timing configuration.
	TimingConfig *TimingConfig `protobuf:"bytes,1,opt,name=timing_config,json=timingConfig" json:"timing_config,omitempty"`
	// ValidatorSetRef contains a reference to the computed validator set.
	// This must match the last block NextValidatorSetRef.
	ValidatorSetRef *storageref.StorageRef `protobuf:"bytes,2,opt,name=validator_set_ref,json=validatorSetRef" json:"validator_set_ref,omitempty"`
}

func (m *ChainConfig) Reset()                    { *m = ChainConfig{} }
func (m *ChainConfig) String() string            { return proto.CompactTextString(m) }
func (*ChainConfig) ProtoMessage()               {}
func (*ChainConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ChainConfig) GetTimingConfig() *TimingConfig {
	if m != nil {
		return m.TimingConfig
	}
	return nil
}

func (m *ChainConfig) GetValidatorSetRef() *storageref.StorageRef {
	if m != nil {
		return m.ValidatorSetRef
	}
	return nil
}

// TimingConfig is the timing configuration for the blockchain.
// Timings are in milliseconds (ms).
type TimingConfig struct {
	// MinProposeAfterBlock is the minimum time after a block before the first round starts.
	// The round starts at block[i-1].Timestamp + MinProposeAfterBlock
	MinProposeAfterBlock uint32 `protobuf:"varint,1,opt,name=min_propose_after_block,json=minProposeAfterBlock" json:"min_propose_after_block,omitempty"`
	// MaxProposeAfterBlock is the maximum time to wait for at least one tx before an empty block is made.
	// This is a soft limit, it's still OK to propose a empty block before this timeout.
	MaxProposeAfterBlock uint32 `protobuf:"varint,2,opt,name=max_propose_after_block,json=maxProposeAfterBlock" json:"max_propose_after_block,omitempty"`
	// RoundLength is the length of each round.
	RoundLength uint32 `protobuf:"varint,3,opt,name=round_length,json=roundLength" json:"round_length,omitempty"`
}

func (m *TimingConfig) Reset()                    { *m = TimingConfig{} }
func (m *TimingConfig) String() string            { return proto.CompactTextString(m) }
func (*TimingConfig) ProtoMessage()               {}
func (*TimingConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *TimingConfig) GetMinProposeAfterBlock() uint32 {
	if m != nil {
		return m.MinProposeAfterBlock
	}
	return 0
}

func (m *TimingConfig) GetMaxProposeAfterBlock() uint32 {
	if m != nil {
		return m.MaxProposeAfterBlock
	}
	return 0
}

func (m *TimingConfig) GetRoundLength() uint32 {
	if m != nil {
		return m.RoundLength
	}
	return 0
}

// NodeMessage is a message submitted to the network by a peer.
type NodeMessage struct {
	// GenesisRef contains a reference to the Genesis object.
	GenesisRef *storageref.StorageRef `protobuf:"bytes,1,opt,name=genesis_ref,json=genesisRef" json:"genesis_ref,omitempty"`
	// PrevMsgRef is the reference to the previous NodeMessage.
	PrevMsgRef *storageref.StorageRef `protobuf:"bytes,2,opt,name=prev_msg_ref,json=prevMsgRef" json:"prev_msg_ref,omitempty"`
	// Timestamp is the timestamp of this NodeMessage.
	// The timestamp must be after the timestamp of the previous message.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp,omitempty"`
	// InnerRef is the reference to the inner object sent in this message.
	InnerRef *storageref.StorageRef `protobuf:"bytes,4,opt,name=inner_ref,json=innerRef" json:"inner_ref,omitempty"`
	// MessageType is the type of message this is.
	MessageType NodeMessageType `protobuf:"varint,5,opt,name=message_type,json=messageType,enum=inca.NodeMessageType" json:"message_type,omitempty"`
}

func (m *NodeMessage) Reset()                    { *m = NodeMessage{} }
func (m *NodeMessage) String() string            { return proto.CompactTextString(m) }
func (*NodeMessage) ProtoMessage()               {}
func (*NodeMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *NodeMessage) GetGenesisRef() *storageref.StorageRef {
	if m != nil {
		return m.GenesisRef
	}
	return nil
}

func (m *NodeMessage) GetPrevMsgRef() *storageref.StorageRef {
	if m != nil {
		return m.PrevMsgRef
	}
	return nil
}

func (m *NodeMessage) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *NodeMessage) GetInnerRef() *storageref.StorageRef {
	if m != nil {
		return m.InnerRef
	}
	return nil
}

func (m *NodeMessage) GetMessageType() NodeMessageType {
	if m != nil {
		return m.MessageType
	}
	return NodeMessageType_NodeMessageType_UNKNOWN
}

// ChainPubsubMessage is a message emitted by a node in the chain pubsub channel.
type ChainPubsubMessage struct {
	// NodeMessageRef contains a reference to the node message being sent.
	NodeMessageRef *storageref.StorageRef `protobuf:"bytes,1,opt,name=node_message_ref,json=nodeMessageRef" json:"node_message_ref,omitempty"`
	// PeerId is the peer ID encoded in base58
	PeerId string `protobuf:"bytes,2,opt,name=peer_id,json=peerId" json:"peer_id,omitempty"`
}

func (m *ChainPubsubMessage) Reset()                    { *m = ChainPubsubMessage{} }
func (m *ChainPubsubMessage) String() string            { return proto.CompactTextString(m) }
func (*ChainPubsubMessage) ProtoMessage()               {}
func (*ChainPubsubMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ChainPubsubMessage) GetNodeMessageRef() *storageref.StorageRef {
	if m != nil {
		return m.NodeMessageRef
	}
	return nil
}

func (m *ChainPubsubMessage) GetPeerId() string {
	if m != nil {
		return m.PeerId
	}
	return ""
}

func init() {
	proto.RegisterType((*Validator)(nil), "inca.Validator")
	proto.RegisterType((*ValidatorSet)(nil), "inca.ValidatorSet")
	proto.RegisterType((*Block)(nil), "inca.Block")
	proto.RegisterType((*BlockRoundInfo)(nil), "inca.BlockRoundInfo")
	proto.RegisterType((*BlockHeader)(nil), "inca.BlockHeader")
	proto.RegisterType((*Vote)(nil), "inca.Vote")
	proto.RegisterType((*Genesis)(nil), "inca.Genesis")
	proto.RegisterType((*ChainConfig)(nil), "inca.ChainConfig")
	proto.RegisterType((*TimingConfig)(nil), "inca.TimingConfig")
	proto.RegisterType((*NodeMessage)(nil), "inca.NodeMessage")
	proto.RegisterType((*ChainPubsubMessage)(nil), "inca.ChainPubsubMessage")
	proto.RegisterEnum("inca.EncryptionStrategy", EncryptionStrategy_name, EncryptionStrategy_value)
	proto.RegisterEnum("inca.NodeMessageType", NodeMessageType_name, NodeMessageType_value)
	proto.RegisterEnum("inca.Validator_OperationMode", Validator_OperationMode_name, Validator_OperationMode_value)
}

func init() { proto.RegisterFile("github.com/aperturerobotics/inca/inca.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 984 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x4b, 0x6f, 0x23, 0x45,
	0x10, 0xde, 0xb1, 0xf3, 0xb0, 0x6b, 0x1c, 0xc7, 0x34, 0xc9, 0x66, 0x36, 0xbc, 0xbc, 0x73, 0x40,
	0x51, 0x90, 0x12, 0x29, 0xd1, 0x2a, 0x48, 0x20, 0xc8, 0x83, 0x28, 0x6b, 0x65, 0x13, 0x5b, 0x13,
	0x13, 0x8e, 0xc3, 0xd8, 0x53, 0x1e, 0x37, 0x9b, 0xe9, 0x1e, 0x75, 0xb7, 0x4d, 0x7c, 0xe1, 0xc2,
	0x8d, 0x3f, 0xc1, 0x81, 0xdf, 0xc3, 0x95, 0x33, 0x3f, 0x05, 0x75, 0xf7, 0x38, 0x7e, 0x24, 0x58,
	0x11, 0x5c, 0xac, 0xae, 0xc7, 0x57, 0x55, 0x5d, 0xf5, 0x75, 0x8d, 0xe1, 0x8b, 0x84, 0xaa, 0xfe,
	0xa0, 0xb3, 0xd7, 0xe5, 0xe9, 0x7e, 0x94, 0xa1, 0x50, 0x03, 0x81, 0x82, 0x77, 0xb8, 0xa2, 0x5d,
	0xb9, 0x4f, 0x59, 0x37, 0x32, 0x3f, 0x7b, 0x99, 0xe0, 0x8a, 0x93, 0x25, 0x7d, 0xde, 0x7e, 0xb3,
	0x08, 0xa2, 0x68, 0x8a, 0x52, 0x45, 0x69, 0x36, 0x39, 0x59, 0xf0, 0xf6, 0xd1, 0x22, 0x98, 0x54,
	0x5c, 0x44, 0x09, 0x0a, 0xec, 0x4d, 0x1d, 0x73, 0xe0, 0xc2, 0x7c, 0xbc, 0xf3, 0x13, 0x76, 0x95,
	0xa4, 0xc9, 0xe4, 0x64, 0x61, 0xfe, 0x5f, 0x0e, 0x94, 0x6f, 0xa3, 0x3b, 0x1a, 0x47, 0x8a, 0x0b,
	0xb2, 0x05, 0xab, 0xd9, 0xa0, 0x13, 0xbe, 0xc7, 0x91, 0xe7, 0xd4, 0x9d, 0x9d, 0x4a, 0xb0, 0x92,
	0x0d, 0x3a, 0x97, 0x38, 0x22, 0xaf, 0xa1, 0x32, 0xe4, 0x8a, 0xb2, 0x24, 0xcc, 0xf8, 0xcf, 0x28,
	0xbc, 0x42, 0xdd, 0xd9, 0x59, 0x0a, 0x5c, 0xab, 0x6b, 0x69, 0x15, 0xf9, 0x0e, 0xaa, 0x3c, 0x43,
	0x11, 0x29, 0xca, 0x59, 0x98, 0xf2, 0x18, 0xbd, 0x62, 0xdd, 0xd9, 0xa9, 0x1e, 0x7c, 0xb2, 0x67,
	0x7a, 0xf3, 0x90, 0x64, 0xaf, 0x39, 0xf6, 0xba, 0xe2, 0x31, 0x06, 0x6b, 0x7c, 0x5a, 0xf4, 0x2f,
	0x60, 0x6d, 0xc6, 0x4e, 0x5e, 0xc1, 0xe6, 0x8c, 0x22, 0xbc, 0x69, 0x9f, 0x5c, 0x34, 0xae, 0x2f,
	0x6a, 0x2f, 0xc8, 0x47, 0xb0, 0x35, 0x6b, 0x6a, 0xb6, 0xce, 0x83, 0x93, 0xb6, 0x36, 0x3a, 0xfe,
	0xb7, 0x50, 0x79, 0x48, 0x79, 0x83, 0x8a, 0xec, 0x03, 0x0c, 0xc7, 0xb2, 0xf4, 0x9c, 0x7a, 0x71,
	0xc7, 0x3d, 0x58, 0x9f, 0x2b, 0x2d, 0x98, 0x72, 0xf1, 0x7f, 0x81, 0xe5, 0xd3, 0x3b, 0xde, 0x7d,
	0x4f, 0x8e, 0xa1, 0xd6, 0xd1, 0x87, 0xb0, 0x8f, 0x51, 0x8c, 0x22, 0x14, 0xd8, 0x33, 0xdd, 0x71,
	0x0f, 0x5e, 0xee, 0x4d, 0x8d, 0xe1, 0xc6, 0x1e, 0x03, 0xec, 0x05, 0x55, 0xe3, 0xff, 0xd6, 0xb8,
	0x07, 0xd8, 0x23, 0x87, 0x50, 0x1e, 0x72, 0x85, 0x1a, 0x29, 0xbd, 0x82, 0x49, 0xfd, 0x6f, 0xd0,
	0x92, 0x76, 0x0c, 0xb0, 0x27, 0xfd, 0x6f, 0xa0, 0x6a, 0xf2, 0x07, 0x7c, 0xc0, 0xe2, 0x06, 0xeb,
	0x71, 0xf2, 0x12, 0x56, 0xfa, 0x48, 0x93, 0xbe, 0x32, 0xe9, 0x97, 0x82, 0x5c, 0x22, 0x1b, 0xb0,
	0x2c, 0xb4, 0x53, 0x3e, 0x15, 0x2b, 0xf8, 0x7f, 0x16, 0xc1, 0x3d, 0x9d, 0xd4, 0x41, 0x8e, 0xc0,
	0x4d, 0x90, 0xa1, 0xa4, 0xf2, 0x19, 0x37, 0x80, 0xdc, 0x55, 0x57, 0x7f, 0x0c, 0xb5, 0x6e, 0x3f,
	0xa2, 0x2c, 0xec, 0x72, 0xd6, 0xa3, 0x89, 0x41, 0x17, 0x16, 0xdf, 0xdf, 0xf8, 0x9f, 0x19, 0x77,
	0x1d, 0xa1, 0x01, 0x9b, 0x0c, 0xef, 0x55, 0xf8, 0x28, 0x4c, 0x71, 0x61, 0x18, 0xa2, 0x41, 0x67,
	0xb3, 0xa1, 0xbe, 0x86, 0xea, 0x5d, 0x24, 0x55, 0x68, 0x27, 0xa2, 0x63, 0x2c, 0x2d, 0x8c, 0x51,
	0xd1, 0xde, 0xb6, 0x8f, 0x66, 0x10, 0x60, 0x9a, 0x13, 0x52, 0xd6, 0xe3, 0xde, 0xb2, 0x41, 0x6e,
	0x58, 0x12, 0xcc, 0xf6, 0x3a, 0x28, 0x8b, 0x87, 0xb6, 0xef, 0x43, 0xc9, 0x66, 0x53, 0xd2, 0x5b,
	0xc9, 0x21, 0x93, 0x67, 0xdb, 0x1e, 0x9f, 0x82, 0x55, 0xe3, 0xd5, 0x96, 0xe4, 0x33, 0x70, 0x33,
	0xc1, 0x33, 0x2e, 0x51, 0x84, 0x34, 0xf6, 0x56, 0xeb, 0xce, 0x4e, 0x39, 0x80, 0xb1, 0xaa, 0x11,
	0x6b, 0x3e, 0x48, 0x15, 0x59, 0x42, 0x78, 0xa5, 0x85, 0xf5, 0x97, 0x8c, 0x63, 0x80, 0x3d, 0xff,
	0x2d, 0x2c, 0xdd, 0x72, 0x85, 0xff, 0x9f, 0x8e, 0xfe, 0xdf, 0x0e, 0xac, 0x5e, 0xd8, 0xf9, 0x92,
	0x57, 0x50, 0xb2, 0x53, 0xa1, 0xb1, 0x89, 0x52, 0x0e, 0x56, 0x8d, 0xdc, 0x88, 0xc9, 0x01, 0x94,
	0x1f, 0xae, 0x99, 0x0f, 0xfc, 0xe9, 0x8b, 0x4f, 0xdc, 0xc8, 0x57, 0x50, 0x41, 0xd6, 0x0d, 0xa5,
	0x12, 0x91, 0xc2, 0x64, 0x94, 0xaf, 0x00, 0xcf, 0xb6, 0xf8, 0x9c, 0x75, 0xc5, 0x28, 0xd3, 0xaf,
	0xf5, 0x26, 0xb7, 0x07, 0x2e, 0xb2, 0xee, 0x58, 0xd0, 0x34, 0xa1, 0x8c, 0x3e, 0x41, 0x93, 0xc5,
	0x23, 0x26, 0x1a, 0x34, 0x4b, 0x13, 0xff, 0x37, 0x07, 0xdc, 0x29, 0x15, 0x39, 0x82, 0x35, 0x45,
	0x53, 0xbd, 0xbf, 0x6c, 0xd8, 0xbc, 0x63, 0xc4, 0x16, 0xd6, 0x36, 0xa6, 0x1c, 0x5d, 0x51, 0x53,
	0x12, 0x39, 0x85, 0x0f, 0x1e, 0x76, 0x42, 0x28, 0x51, 0x3d, 0x83, 0xfd, 0xeb, 0xc3, 0xa9, 0xbd,
	0xa3, 0x8b, 0xf9, 0xdd, 0x81, 0xca, 0x74, 0x0a, 0xf2, 0x06, 0xb6, 0x52, 0xca, 0xc2, 0x9c, 0x11,
	0x61, 0xd4, 0x53, 0x28, 0x2c, 0xa3, 0x4d, 0x5d, 0x6b, 0xc1, 0x46, 0x4a, 0x59, 0xcb, 0x5a, 0x4f,
	0xb4, 0xd1, 0x2e, 0x22, 0x0d, 0x8b, 0xee, 0x9f, 0x84, 0x15, 0x72, 0x58, 0x74, 0xff, 0x18, 0xf6,
	0x1a, 0x2a, 0x96, 0xf4, 0x77, 0xc8, 0x12, 0xd5, 0x37, 0x33, 0x59, 0x0b, 0x5c, 0xa3, 0x7b, 0x67,
	0x54, 0xfe, 0x1f, 0x05, 0x70, 0xaf, 0x79, 0x8c, 0x57, 0x28, 0x65, 0x94, 0xe0, 0x7f, 0xdf, 0x15,
	0x5f, 0x42, 0x25, 0x13, 0x38, 0x0c, 0x53, 0xf9, 0x9c, 0x3d, 0x01, 0xda, 0xf7, 0x4a, 0x9a, 0x87,
	0x3d, 0xc3, 0xb6, 0xe2, 0xf3, 0xd8, 0x76, 0x08, 0x65, 0xca, 0x58, 0xfe, 0x06, 0x16, 0x93, 0xa4,
	0x64, 0x1c, 0xf3, 0x12, 0x53, 0x7b, 0xcd, 0x50, 0x8d, 0x32, 0x34, 0x5b, 0xa0, 0x7a, 0xb0, 0x69,
	0x99, 0x30, 0xd5, 0x84, 0xf6, 0x28, 0xc3, 0xc0, 0x4d, 0x27, 0x82, 0xcf, 0x81, 0x18, 0x4e, 0xb5,
	0x06, 0x1d, 0x39, 0xe8, 0x8c, 0x7b, 0x75, 0x0c, 0x35, 0xa6, 0x3f, 0x3e, 0xe3, 0xa0, 0xcf, 0x78,
	0x8f, 0x6c, 0x92, 0x45, 0x57, 0xa4, 0xbf, 0xba, 0x68, 0x77, 0x45, 0xc1, 0x3c, 0xc1, 0x15, 0x2d,
	0x36, 0xe2, 0xdd, 0x1f, 0x81, 0x3c, 0x7e, 0x33, 0xe4, 0x53, 0xd8, 0x7e, 0xac, 0x0d, 0x1b, 0xcc,
	0xd0, 0xae, 0xf6, 0x82, 0xec, 0xc2, 0xe7, 0x4f, 0xd8, 0xcf, 0x38, 0x1b, 0xa2, 0x48, 0x90, 0xa9,
	0x46, 0x9a, 0x0e, 0x54, 0xd4, 0xb9, 0xc3, 0x9a, 0xb3, 0xfb, 0xab, 0x03, 0xeb, 0x73, 0x77, 0xd6,
	0x9f, 0xd5, 0x39, 0x55, 0xf8, 0xfd, 0xf5, 0xe5, 0x75, 0xf3, 0x87, 0xeb, 0xda, 0x0b, 0xe2, 0xc1,
	0xc6, 0xbc, 0xf1, 0xb6, 0xd9, 0x3e, 0xaf, 0x39, 0xa4, 0x0e, 0x1f, 0xcf, 0x5b, 0x4e, 0xdf, 0x35,
	0xcf, 0x2e, 0xc3, 0xb3, 0xe6, 0xd5, 0x55, 0xa3, 0x5d, 0x2b, 0x90, 0x2d, 0xf8, 0x70, 0xde, 0xe3,
	0xa4, 0xd5, 0xaa, 0x15, 0x3b, 0x2b, 0xe6, 0xbf, 0xc8, 0xe1, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x3a, 0x88, 0x73, 0x9b, 0x67, 0x09, 0x00, 0x00,
}
