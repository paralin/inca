// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/aperturerobotics/inca/segment/segment.proto

package segment

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import cid "github.com/aperturerobotics/hydra/cid"
import inca "github.com/aperturerobotics/inca"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// SegmentStatus is the status of a segment.
type SegmentStatus int32

const (
	// INVALID indicates the segment has been shown to be invalid.
	SegmentStatus_SegmentStatus_INVALID SegmentStatus = 0
	// DISJOINTED indicates the segment has not been connected to any trusted chain yet.
	SegmentStatus_SegmentStatus_DISJOINTED SegmentStatus = 1
	// VALID indicates the segment has been shown to be valid.
	SegmentStatus_SegmentStatus_VALID SegmentStatus = 2
)

var SegmentStatus_name = map[int32]string{
	0: "SegmentStatus_INVALID",
	1: "SegmentStatus_DISJOINTED",
	2: "SegmentStatus_VALID",
}
var SegmentStatus_value = map[string]int32{
	"SegmentStatus_INVALID":    0,
	"SegmentStatus_DISJOINTED": 1,
	"SegmentStatus_VALID":      2,
}

func (x SegmentStatus) String() string {
	return proto.EnumName(SegmentStatus_name, int32(x))
}
func (SegmentStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_segment_cb2b96b66e9af918, []int{0}
}

// SegmentState tracks state of a Segment.
type SegmentState struct {
	// Id is the identifier of the segment.
	// Usually a UUID
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Status is the status of the segment.
	Status SegmentStatus `protobuf:"varint,2,opt,name=status,enum=segment.SegmentStatus" json:"status,omitempty"`
	// HeadBlock is a reference to the HEAD of this segment.
	HeadBlock *cid.BlockRef `protobuf:"bytes,3,opt,name=head_block,json=headBlock" json:"head_block,omitempty"`
	// TailBlock is a reference to the TAIL of this segment.
	TailBlock *cid.BlockRef `protobuf:"bytes,4,opt,name=tail_block,json=tailBlock" json:"tail_block,omitempty"`
	// SegmentPrev is the previous segment.
	SegmentPrev string `protobuf:"bytes,5,opt,name=segment_prev,json=segmentPrev" json:"segment_prev,omitempty"`
	// SegmentNext is the next segment.
	SegmentNext string `protobuf:"bytes,6,opt,name=segment_next,json=segmentNext" json:"segment_next,omitempty"`
	// TailBlockRound is the block round info of the tail.
	TailBlockRound *inca.BlockRoundInfo `protobuf:"bytes,7,opt,name=tail_block_round,json=tailBlockRound" json:"tail_block_round,omitempty"`
	// InvalidError is the reason why this segment is invalid.
	InvalidError         string   `protobuf:"bytes,8,opt,name=invalid_error,json=invalidError" json:"invalid_error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SegmentState) Reset()         { *m = SegmentState{} }
func (m *SegmentState) String() string { return proto.CompactTextString(m) }
func (*SegmentState) ProtoMessage()    {}
func (*SegmentState) Descriptor() ([]byte, []int) {
	return fileDescriptor_segment_cb2b96b66e9af918, []int{0}
}
func (m *SegmentState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SegmentState.Unmarshal(m, b)
}
func (m *SegmentState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SegmentState.Marshal(b, m, deterministic)
}
func (dst *SegmentState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentState.Merge(dst, src)
}
func (m *SegmentState) XXX_Size() int {
	return xxx_messageInfo_SegmentState.Size(m)
}
func (m *SegmentState) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentState.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentState proto.InternalMessageInfo

func (m *SegmentState) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SegmentState) GetStatus() SegmentStatus {
	if m != nil {
		return m.Status
	}
	return SegmentStatus_SegmentStatus_INVALID
}

func (m *SegmentState) GetHeadBlock() *cid.BlockRef {
	if m != nil {
		return m.HeadBlock
	}
	return nil
}

func (m *SegmentState) GetTailBlock() *cid.BlockRef {
	if m != nil {
		return m.TailBlock
	}
	return nil
}

func (m *SegmentState) GetSegmentPrev() string {
	if m != nil {
		return m.SegmentPrev
	}
	return ""
}

func (m *SegmentState) GetSegmentNext() string {
	if m != nil {
		return m.SegmentNext
	}
	return ""
}

func (m *SegmentState) GetTailBlockRound() *inca.BlockRoundInfo {
	if m != nil {
		return m.TailBlockRound
	}
	return nil
}

func (m *SegmentState) GetInvalidError() string {
	if m != nil {
		return m.InvalidError
	}
	return ""
}

func init() {
	proto.RegisterType((*SegmentState)(nil), "segment.SegmentState")
	proto.RegisterEnum("segment.SegmentStatus", SegmentStatus_name, SegmentStatus_value)
}

func init() {
	proto.RegisterFile("github.com/aperturerobotics/inca/segment/segment.proto", fileDescriptor_segment_cb2b96b66e9af918)
}

var fileDescriptor_segment_cb2b96b66e9af918 = []byte{
	// 348 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x5f, 0x4b, 0xc3, 0x30,
	0x14, 0xc5, 0x6d, 0xd5, 0xcd, 0xdd, 0xfd, 0x61, 0xc4, 0x7f, 0x71, 0xf8, 0x30, 0xf5, 0x65, 0xa8,
	0xb4, 0x30, 0xc1, 0x47, 0x41, 0xd9, 0x1e, 0x2a, 0x32, 0xa5, 0x13, 0x5f, 0x4b, 0xda, 0x64, 0x5b,
	0x70, 0x6b, 0x46, 0x9a, 0x96, 0xf9, 0x41, 0xfd, 0x3e, 0x92, 0xb4, 0xd3, 0x15, 0x44, 0x1f, 0xda,
	0x70, 0xcf, 0xfd, 0xdd, 0x9c, 0xc3, 0x0d, 0xdc, 0x4e, 0xb9, 0x9a, 0xa5, 0xa1, 0x13, 0x89, 0x85,
	0x4b, 0x96, 0x4c, 0xaa, 0x54, 0x32, 0x29, 0x42, 0xa1, 0x78, 0x94, 0xb8, 0x3c, 0x8e, 0x88, 0x9b,
	0xb0, 0xe9, 0x82, 0xc5, 0x6a, 0x7d, 0x3a, 0x4b, 0x29, 0x94, 0x40, 0xd5, 0xa2, 0xec, 0xb8, 0x7f,
	0x5d, 0x30, 0xfb, 0xa0, 0x92, 0xb8, 0x11, 0xa7, 0xfa, 0xcb, 0x27, 0x3b, 0x57, 0xff, 0x3a, 0xea,
	0x5f, 0x0e, 0x9f, 0x7f, 0xda, 0xd0, 0x18, 0xe7, 0x4e, 0x63, 0x45, 0x14, 0x43, 0x2d, 0xb0, 0x39,
	0xc5, 0x56, 0xd7, 0xea, 0xd5, 0x7c, 0x9b, 0x53, 0xe4, 0x40, 0x25, 0x51, 0x44, 0xa5, 0x09, 0xb6,
	0xbb, 0x56, 0xaf, 0xd5, 0x3f, 0x72, 0xd6, 0x39, 0x37, 0xc6, 0xd2, 0xc4, 0x2f, 0x28, 0x74, 0x0d,
	0x30, 0x63, 0x84, 0x06, 0xe1, 0x5c, 0x44, 0xef, 0x78, 0xbb, 0x6b, 0xf5, 0xea, 0xfd, 0xa6, 0xa3,
	0xd3, 0x3d, 0x68, 0xc5, 0x67, 0x13, 0xbf, 0xa6, 0x01, 0x53, 0x69, 0x5a, 0x11, 0x3e, 0x2f, 0xe8,
	0x9d, 0x5f, 0x69, 0x0d, 0xe4, 0xf4, 0x19, 0x34, 0x0a, 0xf3, 0x60, 0x29, 0x59, 0x86, 0x77, 0x4d,
	0xca, 0x7a, 0xa1, 0xbd, 0x48, 0x96, 0x6d, 0x22, 0x31, 0x5b, 0x29, 0x5c, 0x29, 0x21, 0x23, 0xb6,
	0x52, 0xe8, 0x0e, 0xda, 0x3f, 0x9e, 0x81, 0x14, 0x69, 0x4c, 0x71, 0xd5, 0x38, 0x1f, 0x38, 0x66,
	0x33, 0xb9, 0xb5, 0xd6, 0xbd, 0x78, 0x22, 0xfc, 0xd6, 0x77, 0x00, 0xa3, 0xa1, 0x0b, 0x68, 0xf2,
	0x38, 0x23, 0x73, 0x4e, 0x03, 0x26, 0xa5, 0x90, 0x78, 0xcf, 0x78, 0x34, 0x0a, 0x71, 0xa8, 0xb5,
	0x4b, 0x02, 0xcd, 0xd2, 0x7e, 0xd0, 0x09, 0x1c, 0x96, 0x84, 0xc0, 0x1b, 0xbd, 0xdd, 0x3f, 0x79,
	0x83, 0xf6, 0x16, 0x3a, 0x05, 0x5c, 0x6e, 0x0d, 0xbc, 0xf1, 0xe3, 0xb3, 0x37, 0x7a, 0x1d, 0x0e,
	0xda, 0x16, 0x3a, 0x86, 0xfd, 0x72, 0x37, 0x1f, 0xb3, 0xc3, 0x8a, 0x79, 0xc1, 0x9b, 0xaf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xc1, 0x71, 0xe5, 0x58, 0x62, 0x02, 0x00, 0x00,
}
