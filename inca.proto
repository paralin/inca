syntax = "proto3";
package inca;

import "github.com/libp2p/go-libp2p-crypto/pb/crypto.proto";
import "github.com/aperturerobotics/timestamp/timestamp.proto";
import "github.com/aperturerobotics/storageref/storageref.proto";
import "github.com/aperturerobotics/objectsig/objectsig.proto";

// Validator holds information about a validator.
message Validator {
  // PubKey is the validator's public key.
  crypto.pb.PublicKey pub_key = 1;
  // VotingPower is the voting power of the validator.
  uint64 voting_power = 2;
  // OperationMode is the operation mode of the validator.
  OperationMode operation_mode = 3;

  // OperationMode is the operation mode of the validator.
  enum OperationMode {
    // OperationMode_STAGING indicates the validator is not currently online.
    // A validator can voluntarily step-down for some time this way.
    OperationMode_STAGING = 0;
    // OperationMode_OPERATING indicates the validator is currently operating.
    OperationMode_OPERATING = 1;
  }
}

// ValidatorSet is the current set of validators.
message ValidatorSet {
  // Validators are the address to validator object pairings.
  map<string, Validator> validators = 1;
  // Timestamp is the time this validator set was minted.
  timestamp.Timestamp timestamp = 2;
}

// Block is a committed block in the chain.
message Block {
  // BlockHeaderRef is the reference to the block header.
  storageref.StorageRef block_header_ref = 1;
  // VoteRefs are the validator votes included to justify this block.
  repeated storageref.StorageRef vote_refs = 2;
}

// BlockRoundInfo contains information about the round.
message BlockRoundInfo {
  uint64 height = 1;
  uint64 round = 2;
}

// BlockHeader is the header of a block.
message BlockHeader {
  // GenesisRef contains a reference to the Genesis object.
  storageref.StorageRef genesis_ref = 1;
  // ChainConfigRef contains a reference to the ChainConfig object.
  storageref.StorageRef chain_config_ref = 2;
  // LastBlockRef contains a reference to the last Block object.
  storageref.StorageRef last_block_ref = 3;
  // RoundInfo contains the round information.
  BlockRoundInfo round_info = 3;
}

// Vote is a signature on a proposal by a validator.
message Vote {
  // BlockHeaderRef is the reference to the block header.
  storageref.StorageRef block_header_ref = 1;
}

// Genesis is the initial object starting the blockchain.
message Genesis {
  // ChainId is used to differentiate between chains, but could be set to anything.
  // It is an opaque value and ignored by the system.
  string chain_id = 1;
  // Timestamp contains the time the genesis block was formed.
  timestamp.Timestamp timestamp = 2;
  // FirstBlockRef contains a reference to the genesis Block.
  storageref.StorageRef first_block_ref = 3;
}

// ChainConfig is the configuration for the blockchain. Can be updated each block.
message ChainConfig {
  // TimingConfig contains the timing configuration.
  TimingConfig timing_config = 1;
}

// TimingConfig is the timing configuration for the blockchain.
// Timings are in milliseconds (ms).
message TimingConfig {
  // MinProposeAfterBlock is the minimum time after a block before the first round starts.
  // The roud starts at block[i-1].Timestamp + MinProposeAfterBlock
  uint32 min_propose_after_block = 1;
  // MaxProposeAfterBlock is the maximum time to wait for at least one tx before an empty block is made.
  // This is a soft limit, it's still OK to propose a empty block before this timeout.
  uint32 max_propose_after_block = 2;
}
